/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "../JuceLibraryCode/JuceHeader.h"
#include "MainWindow.h"
#include "globals.h"
#include "BlipBox.h"

extern "C" void SIG_OVERFLOW0();

class Timer0 : public Timer { 
public:
  void timerCallback(){
    SIG_OVERFLOW0();
  }
};
  
class BlipBoxThread : public Thread { 
public:
  BlipBoxThread() : Thread(T("BlipBox Simulator")) {}
  void run(){
    static int64 sysms = Time::currentTimeMillis();
    static int64 timems = millis();
    static int64 period = 1000;
    while(!threadShouldExit()){
      loop();
      if(millis() - timems > period){
	std::cout << "ms  " << Time::currentTimeMillis() << std::endl;
	std::cout << "ms  " << millis() << std::endl;
	timems = millis();
      }
      if(Time::currentTimeMillis() - sysms > period){
	std::cout << "sys " << Time::currentTimeMillis() << std::endl;
	std::cout << "sys " << millis() << std::endl;
	sysms = Time::currentTimeMillis();
      }
    }
  }
};

//==============================================================================
class BlipSimApplication  : public JUCEApplication
{
public:
    //==============================================================================
    BlipSimApplication()
    {
    }

    ~BlipSimApplication()
    {
    }

    //==============================================================================
    void initialise (const String& commandLine)
    {
        // Do your application's initialisation code here..
      std::cout << "Main" << std::endl;
	init();
	setup();
	blipbox.config.touchscreen_x_min = 0;
	blipbox.config.touchscreen_y_min = 0;
	blipbox.config.touchscreen_x_range = 1023;
	blipbox.config.touchscreen_y_range = 1023;
	blipthread = new BlipBoxThread();
	blipthread->startThread();
	timer0 = new Timer0();
	timer0->startTimer(1);
	std::cout << "started thread" << std::endl;
        mainWindow = new MainAppWindow();
    }

    void shutdown()
    {
        // Do your application's shutdown code here..
      timer0->stopTimer();
      deleteAndZero(timer0);
	blipthread->stopThread(100);
	std::cout << "stopped thread" << std::endl;
	deleteAndZero(blipthread);
        mainWindow = 0;
    }

    //==============================================================================
    void systemRequestedQuit()
    {
        quit();
    }

    //==============================================================================
    const String getApplicationName()
    {
        return "BlipSim";
    }

    const String getApplicationVersion()
    {
        return ProjectInfo::versionString;
    }

    bool moreThanOneInstanceAllowed()
    {
        return true;
    }

    void anotherInstanceStarted (const String& commandLine)
    {
        
    }

private:
    ScopedPointer <MainAppWindow> mainWindow;
  Thread* blipthread;
  Timer* timer0;
};

//==============================================================================
// This macro generates the main() routine that starts the app.
START_JUCE_APPLICATION(BlipSimApplication)
